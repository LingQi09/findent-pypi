name: PyPi release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # Run on Ubuntu, Windows and Mac OS
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Downloads findent tar.gz from sourceforge
      # TODO: Delete when github repo is updated
      - name: Download and Extract findent from fixed release
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            wget https://sourceforge.net/projects/findent/files/findent-4.1.1.tar.gz
            tar -xzvf findent-4.1.1.tar.gz
          elif [ "$RUNNER_OS" == "macOS" ]; then
            wget https://sourceforge.net/projects/findent/files/findent-4.1.1.tar.gz
            tar -xzvf findent-4.1.1.tar.gz
          elif [ "$RUNNER_OS" == "Windows" ]; then
            curl.exe -o ./findent-4.1.1.tar.gz -L https://sourceforge.net/projects/findent/files/findent-4.1.1.tar.gz
            tar.exe -xzvf findent-4.1.1.tar.gz
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      - name: Configure and Compile findent
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            cd findent-4.1.1
            ./configure --prefix=${GITHUB_WORKSPACE}/build/Linux
            make -j2
            make install
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cd findent-4.1.1
            ./configure --prefix=${GITHUB_WORKSPACE}/build/MacOSX CC=clang CXX=clang++
            make -j2
            make install
          elif [ "$RUNNER_OS" == "Windows" ]; then
            cd findent-4.1.1
            ./configure --prefix=${GITHUB_WORKSPACE}/build/Windows --with-windows MINGW32=g++
            make -j2
            make install
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      - name: Build Python wheels
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            INSTALL_ROOT=${GITHUB_WORKSPACE}/build/Linux FINDENT_ROOT=${GITHUB_WORKSPACE}/findent-4.1.1 python3 setup-wheel.py build bdist_wheel --plat-name manylinux1_x86_64 --universal
          elif [ "$RUNNER_OS" == "macOS" ]; then
            INSTALL_ROOT=${GITHUB_WORKSPACE}/build/MacOSX FINDENT_ROOT=${GITHUB_WORKSPACE}/findent-4.1.1 python3 setup-wheel.py build bdist_wheel --plat-name macosx_10_15_x86_64 --universal
          elif [ "$RUNNER_OS" == "Windows" ]; then
            python3 --version
            pip --version
            pip install setuptools wheel
            INSTALL_ROOT=${GITHUB_WORKSPACE}/build/Windows FINDENT_ROOT=${GITHUB_WORKSPACE}/findent-4.1.1 python3 setup-wheel.py build bdist_wheel --plat-name win_amd64 --universal
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      # Save dist/ directory to persist for the next job "publish"
      - uses: actions/upload-artifact@v2
        with:
          name: python-wheels
          path: dist

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: python-wheels
          path: dist

      - name: Display downloaded dir
        run: ls -R
        working-directory: dist
    # - name: Publish to TestPyPi
    #   uses: pypa/gh-action-pypi-publish@master
    #   with:
    #     password: ${{ secrets.TEST_PYPI_API_KEY }}
    #     repository_url: https://test.pypi.org/legacy/
    # - name: Publish to PyPI
    #   # if: startsWith(github.ref, 'refs/tags')
    #   if: runner.os == "Linux"
    #   uses: pypa/gh-action-pypi-publish@master
    #   with:
    #     password: ${{ secrets.PYPI_API_KEY }}
